{"version":3,"sources":["webpack:///./src/components/Pagination.js","webpack:///./src/pages/slicemasters.js"],"names":["PaginationStyles","styled","div","Pagination","pageSize","totalCount","currentPage","base","totalPages","Math","ceil","prevPage","nextPage","hasNextPage","hasPrevPage","disabled","to","Array","from","length","map","_","i","className","key","SliceMasterGrid","SlicemasterStyles","SlicemastersPage","data","pageContext","slicemasters","nodes","SEO","title","parseInt","process","skip","slicemaster","id","slug","current","name","fluid","image","asset","alt","description","query"],"mappings":"sPAIMA,EAAmBC,IAAOC,IAAV,mFAAGD,CAAH,iVAyBP,SAASE,EAAT,GAKX,IAJFC,EAIC,EAJDA,SACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,YACAC,EACC,EADDA,KAEMC,EAAaC,KAAKC,KAAKL,EAAaD,GACpCO,EAAWL,EAAc,EACzBM,EAAWN,EAAc,EACzBO,EAAcD,GAAYJ,EAC1BM,EAAcH,GAAY,EAEhC,OACE,kBAACX,EAAD,KACE,kBAAC,IAAD,CAAMe,UAAWD,EAAaE,GAAOT,EAAL,IAAaI,GAA7C,UAGCM,MAAMC,KAAK,CAAEC,OAAQX,IAAcY,KAAI,SAACC,EAAGC,GAAJ,OACtC,kBAAC,IAAD,CACEC,UAA2B,IAAhBjB,GAA2B,IAANgB,EAAU,UAAY,GACtDN,GAAOT,EAAL,KAAae,EAAI,EAAIA,EAAI,EAAI,IAC/BE,IAAKF,GAEJA,EAAI,MAGT,kBAAC,IAAD,CAAMP,UAAWF,EAAaG,GAAOT,EAAL,IAAaK,GAC1C,IADH,W,gBChDAa,EAAkBxB,IAAOC,IAAV,oFAAGD,CAAH,0FAMfyB,EAAoBzB,IAAOC,IAAV,sFAAGD,CAAH,iVA4BR,SAAS0B,EAAT,GAAkD,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACzCC,EAAeF,EAAKE,aAAaC,MACvC,OACE,oCACE,kBAACC,EAAA,EAAD,CAAKC,MAAK,wBAAyBJ,EAAYvB,aAAe,KAC9D,kBAACH,EAAD,CACEC,SAAU8B,SAASC,KACnB9B,WAAYuB,EAAKE,aAAazB,WAC9BC,YAAauB,EAAYvB,aAAe,EACxC8B,KAAMP,EAAYO,KAClB7B,KAAK,kBAEP,kBAACkB,EAAD,KACGK,EAAaV,KAAI,SAACiB,GAAD,OAChB,kBAACX,EAAD,CAAmBF,IAAKa,EAAYC,IAClC,kBAAC,IAAD,CAAMtB,GAAE,gBAAkBqB,EAAYE,KAAKC,SACzC,4BACE,0BAAMjB,UAAU,QAAQc,EAAYI,QAGxC,kBAAC,IAAD,CAAKC,MAAOL,EAAYM,MAAMC,MAAMF,MAAOG,IAAKR,EAAYI,OAC5D,uBAAGlB,UAAU,eAAec,EAAYS,mBAQ7C,IAAMC,EAAK","file":"component---src-pages-slicemasters-js-4a7f6ba0baa035cfc462.js","sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst PaginationStyles = styled.div`\n  display: flex;\n  align-content: center;\n  align-items: center;\n  justify-items: center;\n  border: 1px solid var(--grey);\n  margin: 2rem 0;\n  border-radius: 5px;\n  text-align: center;\n  & > * {\n    padding: 1rem;\n    flex: 1;\n    border-right: 1px solid var(--grey);\n    text-decoration: none;\n    &[aria-current],\n    &.current {\n      color: var(--red);\n    }\n    &[disabled] {\n      pointer-events: none;\n      color: var(--grey);\n    }\n  }\n`;\n\nexport default function Pagination({\n  pageSize,\n  totalCount,\n  currentPage,\n  base,\n}) {\n  const totalPages = Math.ceil(totalCount / pageSize);\n  const prevPage = currentPage - 1;\n  const nextPage = currentPage + 1;\n  const hasNextPage = nextPage <= totalPages;\n  const hasPrevPage = prevPage >= 1;\n\n  return (\n    <PaginationStyles>\n      <Link disabled={!hasPrevPage} to={`${base}/${prevPage}`}>\n        &larr; Prev\n      </Link>\n      {Array.from({ length: totalPages }).map((_, i) => (\n        <Link\n          className={currentPage === 1 && i === 0 ? 'current' : ''}\n          to={`${base}/${i > 0 ? i + 1 : ''}`}\n          key={i}\n        >\n          {i + 1}\n        </Link>\n      ))}\n      <Link disabled={!hasNextPage} to={`${base}/${nextPage}`}>\n        {' '}\n        Next &rarr;\n      </Link>\n    </PaginationStyles>\n  );\n}\n","import { graphql, Link } from 'gatsby';\nimport React from 'react';\nimport Img from 'gatsby-image';\nimport styled from 'styled-components';\nimport Pagination from '../components/Pagination';\nimport SEO from '../components/SEO';\n\nconst SliceMasterGrid = styled.div`\n  display: grid;\n  grid-gap: 2rem;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n`;\n\nconst SlicemasterStyles = styled.div`\n  a {\n    text-decoration: none;\n  }\n  .gatsby-image-wrapper {\n    height: 400px;\n  }\n  h2 {\n    transform: rotate(-2deg);\n    text-align: center;\n    font-size: 4rem;\n    margin-bottom: -2rem;\n    z-index: 2;\n    position: relative;\n  }\n  .description {\n    background: var(--yellow);\n    padding: 1rem;\n    margin: 2rem;\n    margin: 2rem;\n    margin-top: -6rem;\n    z-index: 2;\n    position: relative;\n    transform: rotate(1deg);\n    text-align: center;\n  }\n`;\n\nexport default function SlicemastersPage({ data, pageContext }) {\n  const slicemasters = data.slicemasters.nodes;\n  return (\n    <>\n      <SEO title={`Slicemasters - Page ${pageContext.currentPage || 1}`} />\n      <Pagination\n        pageSize={parseInt(process.env.GATSBY_PAGE_SIZE)}\n        totalCount={data.slicemasters.totalCount}\n        currentPage={pageContext.currentPage || 1}\n        skip={pageContext.skip}\n        base=\"/slicemasters\"\n      />\n      <SliceMasterGrid>\n        {slicemasters.map((slicemaster) => (\n          <SlicemasterStyles key={slicemaster.id}>\n            <Link to={`/slicemaster/${slicemaster.slug.current}`}>\n              <h2>\n                <span className=\"mark\">{slicemaster.name}</span>\n              </h2>\n            </Link>\n            <Img fluid={slicemaster.image.asset.fluid} alt={slicemaster.name} />\n            <p className=\"description\">{slicemaster.description}</p>\n          </SlicemasterStyles>\n        ))}\n      </SliceMasterGrid>\n    </>\n  );\n}\n\nexport const query = graphql`\n  query($skip: Int = 0, $pageSize: Int = 2) {\n    slicemasters: allSanityPerson(limit: $pageSize, skip: $skip) {\n      totalCount\n      nodes {\n        name\n        description\n        id\n        slug {\n          current\n        }\n        image {\n          asset {\n            fluid(maxWidth: 410) {\n              ...GatsbySanityImageFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}